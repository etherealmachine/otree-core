"""
Watches the oTree firebase for changes.
It looks for two types of objects: logs and decision vectors.
All objects are scoped by the session.

Logs:
    Logs are generated by the otree-log component. Each log message has
    several built-in fields:
        subsession, round, group, role, participantCode
    These are all generated based on the oTree variables for the participant
    running the otree-log component that generated the log message.
    When using the otree-log component, keep this in mind. For example, if
    5 participants send a log event for some change, you will see 5 distinct
    log messages. For this reason, it is a best practice to only log user
    generated events, like the sending of a chat message.

    Logs also have an event field. This field is set by the component and
    the shape varies for each component. For example, otree-chat generates
    events of the shape:
        component: 'otree-chat'
        event: 'msg'
        msg: <user-generated text>

Decision Vectors:
    Decision vectors represent a subject's decision at a given point in
    time. Components can generate decision vectors following a common
    format.
"""
import atexit
from collections import defaultdict
import fasteners
from firebase_token_generator import create_token
import json
import logging
import re
from sseclient import SSEClient
import threading

from otree.models.decision import Decision
from otree.models.log import LogEvent
from otree.models.participant import Participant


logger = logging.getLogger(__name__)

_FIREBASE_SECRET = 'uXop5iUjKkGfH20sFmdCMenX7QnUWmnWDde76WQR'


def start():
    lock = fasteners.InterProcessLock('/tmp/firewatch_lock_file')
    if not lock.acquire(blocking=False):
        return
    atexit.register(lock.release)
    t = Thread('https://otree.firebaseio.com/.json')
    t.daemon = True
    t.start()

_DECISION_RE = re.compile(
    '/component/(?P<component>.*)' +
    '/session/(?P<session>.*)' +
    '/subsession/(?P<subsession>.*)' +
    '/round/(?P<round>.*)' +
    '/group/(?P<group>.*)' +
    '/decisions/(?P<participant_code>.*)')


def _handleDecisionEvent(match, data):
    g = match.groupdict()
    d = Decision()
    d.component = g['component']
    d.session = g['session']
    try:
        d.subsession = int(g['subsession'])
    except ValueError:
        pass
    d.round = int(g['round'])
    d.group = int(g['group'])
    d.participant = Participant.objects.get(code=g['participant_code'])
    d.decision = data
    d.save()

_LOG_RE = re.compile('/log/(?P<session>.*)/.*')


def _handleLogEvent(match, data):
    g = match.groupdict()
    event = LogEvent()
    event.session = g['session']
    event.subsession = data['subsession']
    event.round = data['round']
    event.group = data['group']
    event.participant = Participant.objects.get(code=data['participant_code'])
    event.event = data['event']
    event.save()

_matchers = [
  (_DECISION_RE, _handleDecisionEvent),
  (_LOG_RE, _handleLogEvent),
]


class Thread(threading.Thread):

    def __init__(self, fbURL):
        super(Thread, self).__init__()
        self.fbURL = fbURL
        self.token = create_token(_FIREBASE_SECRET, {'uid': '1'})
        self.decisions = defaultdict()
        logger.info('Firewatch watching %s', fbURL)

    def run(self):
        params = {'auth': self.token}
        messages = SSEClient(
              self.fbURL,
              params=params)
        for msg in messages:
            if msg.event == 'put':
                data = json.loads(msg.data)
                matches = []
                for (regex, handlerFunc) in _matchers:
                    match = regex.match(data['path'])
                    if match:
                        handlerFunc(match, data['data'])
                        matches.append((handlerFunc, match, data['data']))
                if len(matches) == 0:
                    logger.warning(
                        'unhandled firebase event at path %s', data['path'])
                elif len(matches) > 1:
                    logger.warning(
                        'more than one handler for firebase event at path %s',
                        data['path'])
                else:
                    f, match, data = matches[0]
                    f(match, data)
